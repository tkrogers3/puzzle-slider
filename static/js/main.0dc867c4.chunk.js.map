{"version":3,"sources":["Components/Tile.js","Components/Board.js","Components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","state","position","handleClick","bind","this","setState","tileObj","currentPos","e","preventDefault","tileSwap","Col","xs","className","key","i","id","item","onClick","React","Component","Board","tiles","currentPosClick","clickRow","parseInt","clickCol","indexOfBlankItem","findIndex","blankRow","blankCol","console","log","canSwitch","Math","abs","tempTiles","type","tempBlankPos","newTiles","winPos","text","push","length","buildBoard","Fragment","Row","offset","size","map","ShuffleButton","Button","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0dc867c4.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'reactstrap';\n\n\nclass Tile extends React.Component {\n    constructor (props){\n        super (props);\n        this.state={\n            position: -1\n        }\n        this.handleClick=this.handleClick.bind(this)\n    }\ncomponentDidMount(){\n    this.setState({\n        position: this.props.tileObj.currentPos\n    })\n}\n\n\n    handleClick(e){  // position of the t\n        e.preventDefault()\n       this.props.tileSwap(this.state.position) \n     \n     \n\n    }\n\n\n\nrender () {\n    return(\n    \n        <Col\n        xs=\"3\"\n        className=\"border makeBigger tile\"\n        key={this.props.i}\n        id={this.props.item}\n       onClick={this.handleClick}\n\n    >\n     {this.props.tileObj.currentPos}\n    </Col>\n    )\n}\n}\nexport default Tile ","import React, { Component } from 'react';\nimport { Col, Row } from 'reactstrap';\nimport Tile from './Tile.js'\n\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tiles: [] //empty array for tiles\n\n        }\n        this.tileSwap = this.tileSwap.bind(this);\n    }\n\n    ///////////////////////////////////   TILE SWITCH FUNCTION   ////////////////////////////////\n    tileSwap(currentPosClick) {\n\n        //console.log(currentPosClick)\n\n        var clickRow = parseInt(currentPosClick / 4)\n        var clickCol = currentPosClick % 4\n\n        var indexOfBlankItem = this.state.tiles.findIndex(i => i.currentPos === 15)\n\n        var blankRow = parseInt(indexOfBlankItem / 4)\n        var blankCol = indexOfBlankItem % 4\n        console.log(indexOfBlankItem)\n\n\n        var canSwitch = false;\n\n        if (clickRow === blankRow && Math.abs(blankCol - clickCol) === 1) {\n            canSwitch = true;\n\n        } else if (blankCol === clickCol && Math.abs(blankRow - clickRow) === 1) {\n            canSwitch = true;\n\n        }\n\n\n        console.log(canSwitch)\n        if (canSwitch) {\n\n            //temp variable to hold current blank position\n            //let blank col type and pos = clickCol type and pos\n            //this.state.tiles.type     this.state.tiles.currentPos\n            //let clickCol type = blank and pos = 15\n            var tempTiles = this.state.tiles\n            tempTiles[indexOfBlankItem].type = \"regular\"\n            tempTiles[currentPosClick].type = \"blank\"\n            var tempBlankPos = tempTiles[indexOfBlankItem].currentPos\n            tempTiles[indexOfBlankItem].currentPos = tempTiles[currentPosClick].currentPos\n            tempTiles[currentPosClick].currentPos = tempBlankPos\n\n            console.log(tempTiles)\n            this.setState({\n                tiles: tempTiles\n\n            })\n\n        }\n\n    }\n\n\n\n    async buildBoard() {\n        var newTiles = [];\n        var num = 16;\n\n        for (let i = 0; i < num; i++) {\n            let tileObj = {\n                id: i,\n                currentPos: i,\n                winPos: i,\n                type: \"regular\",\n                text: i\n            }\n\n            newTiles.push(tileObj);\n\n        }\n\n\n        if (newTiles[newTiles.length - 1].type === \"regular\") {\n            newTiles[newTiles.length - 1].type = \"blank\";\n            newTiles[newTiles.length - 1].text = \"\";\n        }\n\n\n\n        await this.setState({\n            tiles: newTiles\n        })\n\n        console.log(this.state.tiles)\n    }\n\n    componentDidMount() {\n        this.buildBoard()\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <Row><Col\n                    xs={{ offset: 1, size: 10 }}\n                    className=\" title p-4 \" >\n                    {\"Puzzle Slider\"}\n                </Col></Row>\n                <Row className=\"m-2\">\n                    {this.state.tiles.map((item, i) => (\n                        <Tile\n                            key={i}\n                            tileSwap={this.tileSwap}\n                            i={i}\n                            tileObj={item} />\n\n                    ))}\n                </Row>\n            </React.Fragment>\n        )\n    }\n}\nexport default Board;","import React, { Component } from 'react'\nimport {Button } from 'reactstrap';\n\n\nclass ShuffleButton extends Component {\n    render() {\n        return (\n            <div>\n                <Button\n                size= \"lg\"\n                // onClick =\"\"\n                id=\"button\"\n                className=\"button\">Shuffle\n                </Button>\n            </div>\n        )\n    }\n}\nexport default ShuffleButton","import React from 'react';\nimport Board from './Components/Board.js';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container} from 'reactstrap';\nimport ShuffleButton from './Components/Button'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Container>\n      <Board />\n      </Container>  \n      <ShuffleButton />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}